% This is a script for test.

% sp_map = gen_sp(img, opts);
% post_sp_map = process_sp_map(sp_map);
% 
% saliency_map = manifold_ranking(img, opts);
% % Binary process with threshold generated by Otsu's method.
% binary_map = im2bw(saliency_map, multithresh(saliency_map));

% figure(1);
% imshow(saliency_map);
% figure(2);
% imshow(binary_map);

% get_proposals(images{3});

% img = im2double(rgb2gray(img));
% img = rgb2gray(im2double(img));
% imshow(img);

% videoIndex = 1;
% images = data_info{videoIndex}.data;
% img_num = length(images);
% thld = 10;
% for index = 2:img_num
%     diff = diff_between_images(images{index}, images{index - 1});
%     imshow(diff);
%     pause()
% end

videoIndex = 2;
imgIndex = 18;
images = data_info{videoIndex}.data;
img1 = images{imgIndex};
img2 = images{imgIndex + 1};
% Convert to diverse color space.
tic();
labImg1 = rgb2lab(img1);
ycbcrImg1 = rgb2ycbcr(img1);
hsvImg1 = rgb2hsv(img1);
t = toc();
fprintf('Convert image format in %f s.\n', t);
tic();
labImg2 = rgb2lab(img2);
ycbcrImg2 = rgb2ycbcr(img2);
hsvImg2 = rgb2hsv(img2);
t = toc();
fprintf('Convert image format in %f s.\n', t);

% Get proposals from image.
tic();
[prop1, ~] = get_proposals(img1);
t1 = toc();
fprintf('%d proposal(s) found in %f s.\n', length(prop1), t1);
tic();
[prop2, ~] = get_proposals(img2);
t2 = toc();
fprintf('%d proposal(s) found in %f s.\n', length(prop2), t2);

max_prop_num = 100;

prop_num1 = min(length(prop1), max_prop_num);
prop_num2 = min(length(prop2), max_prop_num);
prop_dist = zeros(prop_num1, prop_num2);
size_sim = zeros(prop_num1, prop_num2);
tic();
for index1 = 1:prop_num1
    p1 = prop1{index1};
    rgbHist1 = get_mask_hist(img1, p1);
    labHist1 = get_mask_hist(labImg1, p1);
    ycbcrHist1 = get_mask_hist(ycbcrImg1, p1);
    hsvHist1 = get_mask_hist(hsvImg1, p1);
    lastHist = merge_hist_info(rgbHist1, labHist1, ycbcrHist1, hsvHist1);
    size1 = sum(p1(:));
    for index2 = 1:prop_num2
        p2 = prop2{index2};
        rgbHist2 = get_mask_hist(img2, p2);
        labHist2 = get_mask_hist(labImg2, p2);
        ycbcrHist2 = get_mask_hist(ycbcrImg2, p2);
        hsvHist2 = get_mask_hist(hsvImg2, p2);
        thisHist = merge_hist_info(rgbHist2, labHist2, ycbcrHist2, hsvHist2);
        prop_dist(index1, index2) = 0.5 * (sum((thisHist - lastHist) .^ 2 ./ (thisHist + lastHist + eps)));
        size2 = sum(p2(:));
        size_sim(index1, index2) = 1.0 * abs(size1 - size2) / max(size1, size2);
    end
end
t = toc();
fprintf('Calculate %d * %d distance in %f s.\n', prop_num1, prop_num2, t);

rank_dist = prop_dist + size_sim;
[sortedDist, disInx] = sort(rank_dist(:));
colInx = ceil(disInx / size(rank_dist, 1));
rowInx = mod(disInx - 1, size(rank_dist, 2)) + 1;

select_prop_num = 100;
for index = 1:select_prop_num
    p1 = prop1{rowInx(index)};
    subplot(1, 2, 1);
    show_op(img1, p1);
    p2 = prop2{colInx(index)};
    subplot(1, 2, 2);
    show_op(img2, p2);
    pause();
end